/** FILENAME: SodOrder
 * AUTHOR: Derrick Onley
 * COURSE: CPT187
 * PURPOSE: The purpose of this class is to define the getters and setters
 * for the SodOrder
 * CREATE DATE: 02/17/20
 */

package edu.cpt187.onley.participation;

public class SodOrder
{
	// DECLARE AND INITIALIZE ALL "FINAL" CONSTANTS
	private final double TAX_RATE = 0.075;
	private final double ZERO_TOTAL = 0.0;
	
	// DECLARE AND INITIALIZE ALL VARIABLES
	private int[] itemCounts;
	private int[] discountCounts;
	private int[] prizeCounts;
	private char discountType = ' ';
	private int itemID = 0;
	private String itemName = "";
	private double itemPrice = 0.0;
	private String discountName = "";
	private double discountRate = 0.0;
	private int howMany = 0;
	private int lastItemSelectedIndex = 0;
	private String prizeName = "";
	
	// SodOrder CLASS CONSTRUCTOR
	public SodOrder()
	{
		
	} // END OF SodOrder CLASS CONSTRUCTOR
	
	// SETS itemCounts size to borrowedRecordCount
	public void setItemCountArray(int borrowedRecordCount)
	{
		if(itemCounts == null)
		{
			itemCounts = new int[borrowedRecordCount];
		}
	} // END OF setItemCountArray
	
	// setItemSelection SETS THE ITEM SELECTION CHAR
	public void setItemSelection(int borrowedSearchIndex)
	{
		lastItemSelectedIndex = borrowedSearchIndex;
	} // END OF setItemSelection
	
	// setItemID SETS THE ITEM ID
	public void setItemID(int[] borrowedItemIDs)
	{
		itemID = borrowedItemIDs[lastItemSelectedIndex];
	} // END OF setItemID
		
	// setItemName SETS THE ITEM NAME
	public void setItemName(String[] borrowedItemNames)
	{
		// IF itemCounts IS NULL, INITIALIZE IT
		if(itemCounts == null)
		{
			itemCounts = new int[borrowedItemNames.length];
		}
		
		itemName = borrowedItemNames[lastItemSelectedIndex];
		itemCounts[lastItemSelectedIndex]++;
		
	} // END OF setItemName
	
	// setItemPrice SETS THE ITEM PRICE
	public void setItemPrice(double[] borrowedItemPrices)
	{
		itemPrice = borrowedItemPrices[lastItemSelectedIndex];
	} // END OF setItemPrice
	
	// setHowMany SETS HOW MANY
	public void setHowMany(int borrowedHowMany)
	{
		howMany = borrowedHowMany; 
	} // END OF setHowMany
	
	// setDiscountType SETS THE DISCOUNT TYPE CHAR
	public void setDiscountType(char borrowedMenuSelection)
	{
		discountType = borrowedMenuSelection;
	} // END OF setDiscountType
	
	// setDiscountName SETS THE DISCOUNT NAME
	public void setDiscountName(String[] borrowedDiscountNames)
	{
		// IF discountCounts IS NULL, INITIALIZE IT
		if(discountCounts == null)
		{
			discountCounts = new int[borrowedDiscountNames.length];
		}
		
		if(discountType == 'A')
			{
				discountName = borrowedDiscountNames[0];
				discountCounts[0]++;
			}
			else if(discountType == 'B')
			{
				discountName = borrowedDiscountNames[1];
				discountCounts[1]++;
			}
			else
			{
				discountName = borrowedDiscountNames[2];
				discountCounts[2]++;
			}
		} // END OF setDiscountName
	
	// setDiscountRate SETS THE DISCOUNT RATE
	public void setDiscountRate(double[] borrowedDiscountRates)
	{
		if(discountType == 'A')
		{
			discountRate = borrowedDiscountRates[0];
		}
		else if(discountType == 'B')
		{
			discountRate = borrowedDiscountRates[1];
		}
		else
		{
			discountRate = borrowedDiscountRates[2];
		}
	} // END OF setDiscountRate
	
	// setPrizeName SETS THE NAME OF THE PRIZE
	public void setPrizeName(String[] borrowedPrizeNames, int borrowedPrizeIndex)
	{
		// IF prizeCounts IS NULL, INITIALIZE IT
		if(prizeCounts == null)
		{
			prizeCounts = new int[borrowedPrizeNames.length];
		}
		
		// SET THE PRIZE NAME FROM THE RANDOM NUMBER
		prizeName = borrowedPrizeNames[borrowedPrizeIndex];
		
		// INCREMENT THE PRIZE COUNT
		prizeCounts[borrowedPrizeIndex]++;
	} // END OF setPrizeName
	
	// setDecreaseInStock INVOKES setReduceStock
	public void setDecreaseInStock(Inventory borrowedInventoryObject)
	{
		borrowedInventoryObject.setReduceStock(howMany);
	} // END OF setDecreaseInStock
	
	// getInStockCount 
	public int getInStockCount(int[] borrowedInStockCounts)
	{
		return borrowedInStockCounts[lastItemSelectedIndex];
	} // END OF getInStockCount
	
	// getItemID GETS THE ITEM ID
	public int getItemID()
	{
		return itemID;
	} // END OF getItemID
	
	//getItemName GETS THE NAME OF THE ITEM
	public String getItemName()
	{
		return itemName;
	} // END OF getItemName
	
	//getItemPrice GETS THE PRICE OF THE ITEM
	public double getItemPrice()
	{
		return itemPrice;
	} // END OF getItemPrice
	
	//getItemCounts GETS THE ITEM COUNTS
	public int[] getItemCounts()
	{
		return itemCounts;
	} // END OF getItemCounts
	
	//getHowMany GETS HOW MANY
	public int getHowMany()
	{
		return howMany;
	} // END OF getHowMany
	
	//getDiscountRate GETS THE DISCOUNT NAME
	public String getDiscountName()
	{
		return discountName;
	} // END OF getDiscountRate
	
	//getDiscountRate GETS THE DISCOUNT RATE
	public double getDiscountRate()
	{
		return discountRate;
	} // END OF getDiscountRate
	
	//getDiscountCounts GETS THE DISCOUNT COUNTS
	public int[] getDiscountCounts()
	{
		return discountCounts;
	} // END OF getDiscountCounts
	
	//getDiscountAmt GETS THE DISCOUNT AMOUNT
	public double getDiscountAmt()
	{
		return itemPrice * discountRate;
	} // END OF getDiscountAmt
	
	//getDiscountPrice GETS THE DISCOUNT PRICE
	public double getDiscountPrice()
	{
		return itemPrice - getDiscountAmt();
	} // END OF getDiscountPrice
	
	// getPrizeName GETS THE PRIZE NAME
	public String getPrizeName()
	{
		return prizeName;
	} // END OF getPrizeName
	
	//getPrizeCounts GETS THE PRIZE COUNTS
	public int[] getPrizeCounts()
	{
		return prizeCounts;
	} // END OF getPrizeCounts
	
	//getSubTotal GETS THE SUB TOTAL
	public double getSubTotal()
	{
		return howMany * getDiscountPrice();
	} // END OF getSubTotal
	
	//getSubTotal GETS THE TAX RATE
	public double getTaxRate()
	{
		return TAX_RATE;
	} // END OF getTaxRate
	
	//getTaxAmt GETS THE TAX AMOUNT
	public double getTaxAmt()
	{
		return getSubTotal() * TAX_RATE;
	} // END OF getTaxAmt
	
	//getTotalCost GETS THE TOTAL COST
	public double getTotalCost()
	{
		double localTotalCost = 0;
		if(discountType == ' ')
		{
			localTotalCost = ZERO_TOTAL;
		}
		else
		{
			localTotalCost = getSubTotal() + getTaxAmt();
		}
		return localTotalCost;
	} // END OF getTotalCost
	
} // END SodOrder
